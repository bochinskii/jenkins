--------
Jobs'ы.
--------

Jobs'ы - это задания. На примерах будет понятней.

$ cd 002_Jobs


----------------------------
Пример - 1. Безполезный job.
---------------------------

$ cd ./Job_echo

Созаддим job, который делает безполезную вещь. При запуске данного job'а он вывполняет
простенький скрипт (build). С данным скриптом можно знакомиться в директории с проектом.

Посоледовательность действий изображена на скриншотах - ./screenshots.

На скриншоте - 3 обратите внимание на галочку - Execute concurrent builds if necessary.
Она говорит о том, что можно запускать данный job одновременно несколько раз.

Мы это сделали только для того, чтобы запустить одновременно несколько раз этот
job и посмотреть как jenkins ставит jobs'ы в очередь (build queue) и показывает
их в Build Executer Status. Это все можно увидеть на скриншоте - 5.

На скриншоте - 6, мы увмдели вывод build'а. По сути то, что сделал наш скрипт.






По-умолчанию job'ы выплняются (рабочая директория) в - "Home directory"/workspace
т.е. в нашем случае /var/jenkins_home/workspace. Это видно из скриншота - 6 (команда - pwd).




А вот где сохраняются наши jobs'ы и их сборки - "Home directory"/jobs:

$ ls -l /var/jenkins_home/jobs/
total 4
drwxr-xr-x 3 jenkins jenkins 4096 Jun 10 11:37 Job_echo

$ ls -l /var/jenkins_home/jobs/Job_echo/
total 12
drwxr-xr-x 13 jenkins jenkins 4096 Jun 10 11:36 builds
-rw-r--r--  1 jenkins jenkins  797 Jun 10 11:37 config.xml
-rw-r--r--  1 jenkins jenkins    3 Jun 10 11:35 nextBuildNumber

$ ls -l /var/jenkins_home/jobs/Job_echo/builds/
total 48
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:03 1
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:31 10
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:36 11
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:04 2
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:04 3
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:04 4
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:07 5
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:14 6
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:16 7
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:19 8
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:20 9
-rw-r--r-- 1 jenkins jenkins    0 Jun 10 11:02 legacyIds
-rw-r--r-- 1 jenkins jenkins  129 Jun 10 11:36 permalinks

Эта информация нам нужна для того, чтобы мы понимали, что каждое выполнение (builds) job'а
записывается. Таким образом нужно очищать директорию от "ненужных" builds'ов.

Это нужно делать т.к. в реальных проектах там может быть занято много места.

На скриншоте - 7 показано как настроить автоматическое удаление старых buils'ов
на определенном job'е. В нашем примере, мы указали хранить builds'ы в колличестве
- 5-ти штук.

после того, как мы сделали данную настройку, если мы запустим - build еще раз,
то примениться политика автоматического удаления.

Вот результат - осталось последних 5 builds'ов

$ ls -l /var/jenkins_home/jobs/Job_echo/builds/
total 24
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:31 10
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:36 11
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:48 12
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:19 8
drwxr-xr-x 2 jenkins jenkins 4096 Jun 10 11:20 9
-rw-r--r-- 1 jenkins jenkins    0 Jun 10 11:02 legacyIds
-rw-r--r-- 1 jenkins jenkins  129 Jun 10 11:48 permalinks



---------------------------------------
Пример - 2. Простой пример deploy'инга
---------------------------------------


$ cd ./Job_index

Данный job будет симулировать CD (continuous deployment):
- сборку "приложения" - build (создадим index.html файл),
- тестирования данного приложения - test (протестируем его на наличие слова - "works")
- deploy (скопируем его на web сервера - node-test и node-prod).

Как уже стало понятно, при выполнении данного job'а будет создаваться файл - index.html (build-build),
далее он протестируется (build-test) и скопируется на web сервера (сперва на node-test, а потом
на node-prod).


Для этого задания нам понадобится два web сервера. Мы уже подготовили Vagrantfile
для этих целей.

$ vagrant up

Так же нам понадобится плагин - Publish over SSH.
https://plugins.jenkins.io/publish-over-ssh/
Он нужен для того, чтобы мы скопировали index.html файл по средствам ssh.

После того, как установили плагин его нужно настроить.
Делается это довольно таки легко. Ознакомиться можно со скриншотами 1 - 2.

Тут не нужно вписывать ssh ключи. Мы их будем указывать на уровне jobs'ов.

----------------------------------------------------------
Заметка:

В Vagrantfile обратите внимание на строчку:

sudo sed -i "/#PubkeyAuthentication.*/a \PubkeyAcceptedKeyTypes=+ssh-rsa" /etc/ssh/sshd_config

Дело в том, что openssl на ubuntu 22.04 не поддерживает шифрование rsa. Чтобы RSA ключи работали,
нужно настроить sshd_conf. Мы это сделали в Vagrantfile'е.

Обратите на это внимание, если будите настраивать серверную инфраструктуру отдельно
от того как это делается в данном руководстве.

---------------------------------------------------------


Созададим job, который после build, test сделает deploy в тестовую инфраструктуру - node-test.
Создание данного job'а отображено на скриншотах - test-1 - test-4.

На скриншоте test-3 обратите внимание на кнопку - Advinced на уровне node-test.
Там и вписывается имя пользователя и ssh ключ - test-4.

Аналогично настраиваются все сервера, для которых мы будем тиспользовать плагин
- Publish over SSH.


---------------------------------------------------------------
Заметка:

Вы можете задасться вопросом, а где создался данный index.html файл?
А вот:
/var/jenkins_home/workspace/Job_index/index.html

---------------------------------------------------------------------

Выполним данный job.

А теперь протестируем

$ curl http://192.168.0.201
<h1>It is works</h1>

Работает.

Теперь, после того, как мы поняли что наше "приложение" (index.html) работает,
мы можем развернуть его на node-prod.

Все действия можете посмотреть на скриншотах - prod-1 - prod-2.

Мы сделали job на основе job'а для тестовой инфораструрктуры т.к. они ничем
не отличаются кроме как сервером на который нужно сделать deploy.

Выполним данный job.

Протестируем на prod

$ curl http://192.168.0.202/
<h1>It is works</h1>

Все работает.


Если вам инфраструктура не нужно, то можете ее удалить или остановить

$ vagrant destroy

$ vagrant halth

Лучше конечно остановить т.к. эта информатсруктура нам еще понадобиться.
